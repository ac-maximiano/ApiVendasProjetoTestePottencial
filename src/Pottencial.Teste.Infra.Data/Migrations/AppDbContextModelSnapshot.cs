// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pottencial.Teste.Infra.Data.Context;

#nullable disable

namespace Pottencial.Teste.Infra.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.16");

            modelBuilder.Entity("Pottencial.Teste.Domain.Entities.ItemVenda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("PrecoVenda")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantidade")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("VendaId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoId");

                    b.HasIndex("VendaId");

                    b.ToTable("ItensVendas");
                });

            modelBuilder.Entity("Pottencial.Teste.Domain.Entities.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Ativo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PrecoReferencia")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Produtos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cdeb16a8-479c-48ac-a68b-2876323e906b"),
                            Ativo = true,
                            CriadoEm = new DateTime(2024, 3, 4, 22, 47, 9, 478, DateTimeKind.Local).AddTicks(9904),
                            Descricao = "Camiseta de algodão",
                            Nome = "Camiseta",
                            PrecoReferencia = 25.99m
                        },
                        new
                        {
                            Id = new Guid("a6ac012d-1c02-409f-9cf8-a48210399cc8"),
                            Ativo = true,
                            CriadoEm = new DateTime(2024, 3, 4, 22, 47, 9, 478, DateTimeKind.Local).AddTicks(9929),
                            Descricao = "Notebook com processador i7",
                            Nome = "Notebook",
                            PrecoReferencia = 1200.50m
                        },
                        new
                        {
                            Id = new Guid("b2fbc193-c3e6-4fa8-a147-8b5a26a6c8ce"),
                            Ativo = true,
                            CriadoEm = new DateTime(2024, 3, 4, 22, 47, 9, 478, DateTimeKind.Local).AddTicks(9932),
                            Descricao = "Sapato social preto",
                            Nome = "Sapato",
                            PrecoReferencia = 49.90m
                        },
                        new
                        {
                            Id = new Guid("4a676cb9-a9a6-416e-996c-e2cdd57db4af"),
                            Ativo = true,
                            CriadoEm = new DateTime(2024, 3, 4, 22, 47, 9, 478, DateTimeKind.Local).AddTicks(9934),
                            Descricao = "Livro de ficção científica",
                            Nome = "Livro",
                            PrecoReferencia = 15.75m
                        },
                        new
                        {
                            Id = new Guid("7b759bb1-0816-455c-8261-ebbddcefe38a"),
                            Ativo = true,
                            CriadoEm = new DateTime(2024, 3, 4, 22, 47, 9, 478, DateTimeKind.Local).AddTicks(9935),
                            Descricao = "Smartphone Android",
                            Nome = "Celular",
                            PrecoReferencia = 499.99m
                        },
                        new
                        {
                            Id = new Guid("5992e574-16e9-4654-ad5d-93fe4d6d89eb"),
                            Ativo = true,
                            CriadoEm = new DateTime(2024, 3, 4, 22, 47, 9, 478, DateTimeKind.Local).AddTicks(9937),
                            Descricao = "Cadeira de escritório",
                            Nome = "Cadeira",
                            PrecoReferencia = 79.95m
                        },
                        new
                        {
                            Id = new Guid("51396c6f-1217-40c1-86a9-df97040c5df1"),
                            Ativo = true,
                            CriadoEm = new DateTime(2024, 3, 4, 22, 47, 9, 478, DateTimeKind.Local).AddTicks(9939),
                            Descricao = "Fone de ouvido sem fio",
                            Nome = "Fone de Ouvido",
                            PrecoReferencia = 39.99m
                        },
                        new
                        {
                            Id = new Guid("471709d4-7ec6-4eab-a7d2-fbc69b210e49"),
                            Ativo = true,
                            CriadoEm = new DateTime(2024, 3, 4, 22, 47, 9, 478, DateTimeKind.Local).AddTicks(9941),
                            Descricao = "Relógio analógico",
                            Nome = "Relógio",
                            PrecoReferencia = 29.50m
                        },
                        new
                        {
                            Id = new Guid("b51ac7ec-6bc7-495a-bd14-816e918ef9c2"),
                            Ativo = true,
                            CriadoEm = new DateTime(2024, 3, 4, 22, 47, 9, 478, DateTimeKind.Local).AddTicks(9942),
                            Descricao = "Bicicleta urbana",
                            Nome = "Bicicleta",
                            PrecoReferencia = 199.99m
                        },
                        new
                        {
                            Id = new Guid("72073684-ad02-4ef0-b753-f9fda4dbc08f"),
                            Ativo = true,
                            CriadoEm = new DateTime(2024, 3, 4, 22, 47, 9, 478, DateTimeKind.Local).AddTicks(9946),
                            Descricao = "Mochila resistente à água",
                            Nome = "Mochila",
                            PrecoReferencia = 45.00m
                        });
                });

            modelBuilder.Entity("Pottencial.Teste.Domain.Entities.Venda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("VendedorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("VendedorId");

                    b.ToTable("Vendas");
                });

            modelBuilder.Entity("Pottencial.Teste.Domain.Entities.Vendedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Ativo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Vendedores");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc2642b7-a6b7-460e-968b-69061b94caa6"),
                            Ativo = true,
                            Cpf = "123.456.789-01",
                            CriadoEm = new DateTime(2024, 3, 4, 22, 47, 9, 479, DateTimeKind.Local).AddTicks(203),
                            Email = "joao@email.com",
                            Nome = "João Silva",
                            Telefone = "(11) 1234-5678"
                        },
                        new
                        {
                            Id = new Guid("3ccd1256-50db-429c-b2cf-6da53fbe5dbb"),
                            Ativo = true,
                            Cpf = "987.654.321-00",
                            CriadoEm = new DateTime(2024, 3, 4, 22, 47, 9, 479, DateTimeKind.Local).AddTicks(683),
                            Email = "maria@email.com",
                            Nome = "Maria Oliveira",
                            Telefone = "(22) 8765-4321"
                        },
                        new
                        {
                            Id = new Guid("223847c7-1cf0-4d02-8786-6a7dfc6025aa"),
                            Ativo = true,
                            Cpf = "111.222.333-44",
                            CriadoEm = new DateTime(2024, 3, 4, 22, 47, 9, 479, DateTimeKind.Local).AddTicks(867),
                            Email = "carlos@email.com",
                            Nome = "Carlos Santos",
                            Telefone = "(33) 5555-5555"
                        },
                        new
                        {
                            Id = new Guid("d28b5f3a-f07e-41b8-9cbf-d5a78e7a8d38"),
                            Ativo = true,
                            Cpf = "555.666.777-88",
                            CriadoEm = new DateTime(2024, 3, 4, 22, 47, 9, 479, DateTimeKind.Local).AddTicks(1056),
                            Email = "ana@email.com",
                            Nome = "Ana Souza",
                            Telefone = "(44) 9876-5432"
                        },
                        new
                        {
                            Id = new Guid("7d8a1a94-1fd2-456f-89cd-2bdb33b1254e"),
                            Ativo = true,
                            Cpf = "999.888.777-66",
                            CriadoEm = new DateTime(2024, 3, 4, 22, 47, 9, 479, DateTimeKind.Local).AddTicks(1233),
                            Email = "rafaela@email.com",
                            Nome = "Rafaela Lima",
                            Telefone = "(55) 1234-5678"
                        },
                        new
                        {
                            Id = new Guid("77a2e783-6d4b-4173-813a-58e1c1e22c95"),
                            Ativo = true,
                            Cpf = "444.333.222-11",
                            CriadoEm = new DateTime(2024, 3, 4, 22, 47, 9, 479, DateTimeKind.Local).AddTicks(1395),
                            Email = "pedro@email.com",
                            Nome = "Pedro Costa",
                            Telefone = "(66) 7654-3210"
                        },
                        new
                        {
                            Id = new Guid("70d8e681-446f-4a2e-9064-8249453e0976"),
                            Ativo = true,
                            Cpf = "777.888.999-00",
                            CriadoEm = new DateTime(2024, 3, 4, 22, 47, 9, 479, DateTimeKind.Local).AddTicks(1554),
                            Email = "camila@email.com",
                            Nome = "Camila Pereira",
                            Telefone = "(77) 1122-3344"
                        },
                        new
                        {
                            Id = new Guid("76754909-707b-47f0-b21c-b37292fd23af"),
                            Ativo = true,
                            Cpf = "333.222.111-00",
                            CriadoEm = new DateTime(2024, 3, 4, 22, 47, 9, 479, DateTimeKind.Local).AddTicks(1715),
                            Email = "fernando@email.com",
                            Nome = "Fernando Oliveira",
                            Telefone = "(88) 4455-6677"
                        },
                        new
                        {
                            Id = new Guid("865b56f2-70da-4b76-b2f7-a76922d3bf12"),
                            Ativo = true,
                            Cpf = "666.555.444-33",
                            CriadoEm = new DateTime(2024, 3, 4, 22, 47, 9, 479, DateTimeKind.Local).AddTicks(1871),
                            Email = "mariana@email.com",
                            Nome = "Mariana Silva",
                            Telefone = "(99) 9876-5432"
                        },
                        new
                        {
                            Id = new Guid("2401519a-d89e-4e5d-99ec-092aac0a6c20"),
                            Ativo = true,
                            Cpf = "222.333.444-55",
                            CriadoEm = new DateTime(2024, 3, 4, 22, 47, 9, 479, DateTimeKind.Local).AddTicks(2053),
                            Email = "lucas@email.com",
                            Nome = "Lucas Santos",
                            Telefone = "(10) 1234-5678"
                        });
                });

            modelBuilder.Entity("Pottencial.Teste.Domain.Entities.ItemVenda", b =>
                {
                    b.HasOne("Pottencial.Teste.Domain.Entities.Produto", "Produto")
                        .WithMany("Itens")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pottencial.Teste.Domain.Entities.Venda", "Venda")
                        .WithMany("Itens")
                        .HasForeignKey("VendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");

                    b.Navigation("Venda");
                });

            modelBuilder.Entity("Pottencial.Teste.Domain.Entities.Venda", b =>
                {
                    b.HasOne("Pottencial.Teste.Domain.Entities.Vendedor", "Vendedor")
                        .WithMany("Pedidos")
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("Pottencial.Teste.Domain.Entities.Produto", b =>
                {
                    b.Navigation("Itens");
                });

            modelBuilder.Entity("Pottencial.Teste.Domain.Entities.Venda", b =>
                {
                    b.Navigation("Itens");
                });

            modelBuilder.Entity("Pottencial.Teste.Domain.Entities.Vendedor", b =>
                {
                    b.Navigation("Pedidos");
                });
#pragma warning restore 612, 618
        }
    }
}
